;; User behaviors
;; -----------------------------
;; Behaviors are stored as a set of diffs that are merged together
;; to create the final set of functionality that makes up Light Table. You can
;; modify these diffs to either add or subtract functionality.
;;
;; Behaviors are added to tags, objects with those tags then automatically gain
;; whatever logic the behavior imparts. To see a list of user-level behaviors,
;; start typing a word related to the functionality you want in between the square
;; brackets (e.g. "theme").

{:+ {
     ;; The app tag is kind of like global scope. You assign behaviors that affect
     ;; all of Light Table here
     :app [(:lt.objs.style/set-skin "dark")]

     ;; The editor tag is applied to all editors
     :editor [:lt.objs.editor/no-wrap
              (:lt.objs.style/set-theme "default")
              :lt.plugins.vim/activate-vim
              (:lt.plugins.vim/map-keys {"\\wr" ":ltexec paredit-plus.wrap-round"
                                        "\\ws" ":ltexec paredit-plus.wrap-square"
                                        "\\wc" ":ltexec paredit-plus.wrap-curly"
                                        "\\wq" ":ltexec paredit-plus.wrap-quote"
                                        "\\bs" ":ltexec paredit-plus.splice-sexp-killing-backward"
                                        "\\fs" ":ltexec paredit-plus.splice-sexp-killing-forward"})

              (:lt.objs.style/font-settings "" "13" "" )
              (:lt.objs.style/set-theme "solarized")]
     ;; Here we can add behaviors to just clojure editors
     :editor.clojure [(:lt.plugins.clojure/print-length 1000)]

     :files [(:lt.objs.files/file-types [{:exts [:cljx],
                                          :mime "text/x-clojure",
                                          :name "CljX",
                                          :tags [:editor.clj :editor.clojure]}])]
 }

 ;; You can use the subtract key to remove behavior that may get added by
 ;; another diff
 :- {:app []}}
